<?php


/**
 * Generated by PHPUnit_SkeletonGenerator on 2014-10-07 at 18:11:53.
 */
class TrainInfoLogModelTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var TrainInfoLog
     */
    protected $object;

    public static function setUpBeforeClass()
    {

    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $app = new \Slim\Slim();
        ORM::configure('sqlite::memory:');
        $db = ORM::get_db();
        $this->object = new \Model\TrainInfoLogModel($app, $db);
        $this->object->setup();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        ORM::reset_db();
    }

    function makeExp($railway, $operator,$created, $origin,$updated, $status, $information) {
        return array('railway'=> $railway,
                     'operator'=> $operator,
                     'created'=> $created,
                     'origin'=> $origin,
                     'updated'=> $updated,
                     'status'=> $status,
                     'information'=> $information);
    }
    function checkData($exp_list, $act_list, $pref_msg) {
        $this->assertEquals(count($exp_list), count($act_list), $pref_msg. '数の確認');
        if ( count($exp_list) != count($act_list)) {
            return;
        }
        for ($i = 0; $i < count($exp_list); ++$i) {
            $exp = $exp_list[$i];
            $act = $act_list[$i];
            $this->assertEquals($exp['railway'], $act->railway, $pref_msg. 'railwayの比較');
            $this->assertEquals($exp['operator'], $act->operator, $pref_msg. 'operatorの比較');
            $this->assertEquals(date("Y/m/d H:i:s", $exp['created']), 
                                date("Y/m/d H:i:s", $act->created), 
                                $pref_msg. 'createdの比較');
            $this->assertEquals(date("Y/m/d H:i:s", $exp['origin']),
                                date("Y/m/d H:i:s", $act->origin),
                                $pref_msg. 'originの比較');
            $this->assertEquals(date("Y/m/d H:i:s",$exp['updated']),
                                date("Y/m/d H:i:s", $act->updated),
                                $pref_msg. 'updatedの比較');
            $this->assertEquals($exp['status'], $act->status, $pref_msg. 'statusの比較');
            $this->assertEquals($exp['information'], $act->information, $pref_msg. 'informationの比較');

        }
    }

    /**
     * ログの追加の試験
     */
    function testAppend()
    {
	    
        date_default_timezone_set('Asia/Tokyo');
        $this->object->append('rail1',
                              'metoro',
                              strtotime('2014-10-10T03:00:10+09:00'),
                              strtotime('2014-10-10T03:00:05+09:00'),
                              strtotime('2014-10-10T03:00:15+09:00'),
                              '現在、平常どおり運転しています。',
                              '');
        $this->object->append('rail2',
                              'metoro',
                              strtotime('2014-10-10T04:00:10+09:00'),
                              strtotime('2014-10-10T04:00:05+09:00'),
                              strtotime('2014-10-10T04:00:15+09:00'),
                              '現在、平常どおり運転しています。',
                              '');

        $ret = $this->object->getLogs('rail1', 10, 0);
        $exp = array(
            $this->makeExp('rail1',
                           'metoro',
                           strtotime('2014-10-10T03:00:10+09:00'),
                           strtotime('2014-10-10T03:00:05+09:00'),
                           strtotime('2014-10-10T03:00:15+09:00'),
                           '現在、平常どおり運転しています。',
                           '')
        );
        $this->checkData($exp, $ret, '初回追加処理:');

        // originに変化がない場合は追加されない
        $this->object->append('rail1',
                              'metoro',
                              strtotime('2014-10-10T03:10:10+09:00'),
                              strtotime('2014-10-10T03:00:05+09:00'),
                              strtotime('2014-10-10T03:10:15+09:00'),
                              '現在、平常どおり運転しています。xxxx',
                              'ｘｘｘｘxxxxx');
        $ret = $this->object->getLogs('rail1', 10, 0);
        $this->checkData($exp, $ret, 'originに変化がない場合は追加されない:');

        // originに変化がある場合は追加される
        $this->object->append('rail1',
                              'metoro',
                              strtotime('2014-10-10T03:10:10+09:00'),
                              strtotime('2014-10-10T03:10:05+09:00'),
                              strtotime('2014-10-10T03:10:15+09:00'),
                              '運行情報あり',
                              '速度規制');
        $ret = $this->object->getLogs('rail1', 10, 0);
        $exp = array(
            $this->makeExp('rail1',
                           'metoro',
                           strtotime('2014-10-10T03:10:10+09:00'),
                           strtotime('2014-10-10T03:10:05+09:00'),
                           strtotime('2014-10-10T03:10:15+09:00'),
                           '運行情報あり',
                           '速度規制'),
            $this->makeExp('rail1',
                           'metoro',
                           strtotime('2014-10-10T03:00:10+09:00'),
                           strtotime('2014-10-10T03:00:05+09:00'),
                           strtotime('2014-10-10T03:00:15+09:00'),
                           '現在、平常どおり運転しています。',
                           '')
        );
        $this->checkData($exp, $ret, 'statusに変化がある場合は追加される:');
    }

}
